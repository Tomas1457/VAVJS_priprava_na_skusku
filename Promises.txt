Promises
▶ new Promise((resolve,reject)=¿{});
▶ pending, resolved, rejected
▶ .then(), .catch()

//1

var bigCompute = new Promise((resolve,reject)=>{
    var r = 4;
    // this is something taking very long
    setTimeout(function(){
        console.log('result processed')
        if(r===4) resolve(r);
        else reject('boom');
    }, 5000);
    console.log('bigCompute finished');
});

bigCompute.then((result)=>{
    console.log(result);
}).catch((err)=>{
    console.error(err);
});

//Promise 2:

var nBigCompute = function(p) {
    return new Promise((resolve,reject) => {
        setTimeout(function(){
            console.log('result processed');
            if(p!==4) resolve(p);
            else reject('boooom');
        }, 5000);
    });
};

nBigCompute(3).then((r)=>{
    console.log(r);
}).catch((e)=>{
    console.error(e);
});

//Promise chaining:

doSomething()
.then((result)=>{
    return doSomethingElse(result);
})
.then((newResult) => {
    return doThirdThing(newResult);
})
.then((finalResult) => {
    console.log('Got the final result: ' + finalResult);
})
.catch(failureCallback);